gpg.program::
	Use this custom program instead of "`gpg`" found on `$PATH` when
	making or verifying a PGP signature. The program must support the
	same command-line interface as GPG, namely, to verify a detached
	signature, "`gpg --verify $signature - <$file`" is run, and the
	program is expected to signal a good signature by exiting with
	code 0, and to generate an ASCII-armored detached signature, the
	standard input of "`gpg -bsau $key`" is fed with the contents to be
	signed, and the program is expected to send the result to its
	standard output.

gpg.format::
	Specifies which key format to use when signing with `--gpg-sign`.
	Default is "openpgp". Other possible values are "x509", "ssh".

gpg.<format>.program::
	Use this to customize the program used for the signing format you
	chose. (see `gpg.program` and `gpg.format`) `gpg.program` can still
	be used as a legacy synonym for `gpg.openpgp.program`. The default
	value for `gpg.x509.program` is "gpgsm" and `gpg.ssh.program` is "ssh-keygen".

gpg.minTrustLevel::
	Specifies a minimum trust level for signature verification.  If
	this option is unset, then signature verification for merge
	operations require a key with at least `marginal` trust.  Other
	operations that perform signature verification require a key
	with at least `undefined` trust.  Setting this option overrides
	the required trust-level for all operations.  Supported values,
	in increasing order of significance:
+
* `undefined`
* `never`
* `marginal`
* `fully`
* `ultimate`

gpg.ssh.keyring::
	A file containing all valid SSH public signing keys.
	Similar to an .ssh/authorized_keys file.
	See ssh-keygen(1) "ALLOWED SIGNERS" for details.
	If a signing key is found in this file then the trust level will
	be set to "fully". Otherwise if the key is not present
	but the signature is still valid then the trust level will be "undefined".

	This file can be set to a location outside of the repository
	and every developer maintains their own trust store.
	A central repository server could generate this file automatically
	from ssh keys with push	access to verify the code against.
	In a corporate setting this file is probably generated at a global location
	from some automation that already handles developer ssh keys.

	A repository that is only allowing signed commits can store the file
	in the repository itself using a relative path. This way only committers
	with an already valid key can add or change keys in the keyring.

	Using a SSH CA key with the cert-authority option
	(see ssh-keygen(1) "CERTIFICATES") is also valid.

	To revoke a key place the public key without the principal into the
	revocationKeyring.

gpg.ssh.revocationKeyring::
	Either a SSH KRL or a list of revoked public keys (without the principal prefix).
	See ssh-keygen(1) for details.
	If a public key is found in this file then it will always be treated
	as having trust level "never" and signatures will show as invalid.
