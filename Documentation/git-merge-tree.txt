git-merge-tree(1)
=================

NAME
----
git-merge-tree - Perform merge without touching index or working tree


SYNOPSIS
--------
[verse]
'git merge-tree' [--write-tree] [<options>] <branch1> <branch2>
'git merge-tree' [--trivial-merge] <base-tree> <branch1> <branch2>

DESCRIPTION
-----------

Performs a merge, but does not make any new commits and does not read
from or write to either the working tree or index.

The first form will merge the two branches, doing a full recursive
merge with rename detection.  The rest of this manual (other than the
next paragraph) describes the first form in more detail -- including
options, output format, exit status, and usage notes.

The second form is deprecated; it is kept for backward compatibility
reasons but may be deleted in the future.  It will only do a trivial
merge.  It reads three tree-ish, and outputs trivial merge results and
conflicting stages to the standard output in a semi-diff format.
Since this was designed for higher level scripts to consume and merge
the results back into the index, it omits entries that match
<branch1>.  The result of this second form is is similar to what
three-way 'git read-tree -m' does, but instead of storing the results
in the index, the command outputs the entries to the standard output.
This form not only has limited applicability, the output format is
also difficult to work with, and it will generally be less performant
than the first form even on successful merges (especially if working
in large repositories).  The remainder of this manual will only
discuss the first form.

OPTIONS
-------

--exclude-oids-and-modes::
	Instead of writing a list of (mode, oid, stage, path) tuples
	to output for conflicted files, just provide a list of
	filenames with conflicts.

--[no-]messages::
	Write any informational messages such as "Auto-merging <path>"
	or CONFLICT notices to the end of stdout.  If unspecified, the
	default is to include these messages if there are merge
	conflicts, and to omit them otherwise.

--allow-unrelated-histories::
	merge-tree will by default error out if the two branches specified
	share no common history.  This flag can be given to override that
	check and make the merge proceed anyway.

OUTPUT
------

By default, for a successful merge, the output from git-merge-tree is
simply one line:

	<OID of toplevel tree>

Whereas for a conflicted merge, the output is by default of the form:

	<OID of toplevel tree>
	<Conflicted file info>
	<Informational messages>

These are discussed individually below.

OID of toplevel tree
~~~~~~~~~~~~~~~~~~~~

This is a tree object that represents what would be checked out in the
working tree at the end of `git merge`.  If there were conflicts, then
files within this tree may have embedded conflict markers.

Conflicted file info
~~~~~~~~~~~~~~~~~~~~

This is a sequence of lines with the format

	<mode> <object> <stage> <filename>

The filename will be quoted as explained for the configuration
variable `core.quotePath` (see linkgit:git-config[1]).  However, if
the `--exclude-oids-and-modes` option is passed, the mode, object, and
stage will be omitted.

Informational messages
~~~~~~~~~~~~~~~~~~~~~~

This always starts with a blank line to separate it from the previous
sections, and then has free-form messages about the merge, such as:

  * "Auto-merging <file>"
  * "CONFLICT (rename/delete): <oldfile> renamed...but deleted in..."
  * "Failed to merge submodule <submodule> (<reason>)"
  * "Warning: cannot merge binary files: <filename>"

EXIT STATUS
-----------

For a successful, non-conflicted merge, the exit status is 0.  When the
merge has conflicts, the exit status is 1.  If the merge is not able to
complete (or start) due to some kind of error, the exit status is
something other than 0 or 1.

USAGE NOTES
-----------

git-merge-tree was written to be low-level plumbing, similar to
hash-object, mktree, commit-tree, update-ref, and mktag.  Thus, it could
be used as a part of a series of steps such as

       NEWTREE=$(git merge-tree --write-tree $BRANCH1 $BRANCH2)
       test $? -eq 0 || die "There were conflicts..."
       NEWCOMMIT=$(git commit-tree $NEWTREE -p $BRANCH1 -p $BRANCH2)
       git update-ref $BRANCH1 $NEWCOMMIT

However, it does not quite fit into the same category of low-level
plumbing commands since the possibility of merge conflicts give it a
much higher chance of the command not succeeding (and NEWTREE containing
a bunch of stuff other than just a toplevel tree).

git-merge-tree was written to provide users with the same information
that they'd have access to if using `git merge`:
  * what would be written to the working tree (the <OID of toplevel tree>)
  * the higher order stages that would be written to the index (the
    <Conflicted file info>)
  * any messages that would have been printed to stdout (the <Informational
    messages>)

MISTAKES TO AVOID
-----------------

Do NOT look through the resulting toplevel tree to try to find which
files conflict; parse the <Conflicted file info> section instead.  Not
only would parsing an entire tree be horrendously slow in large
repositories, there are numerous types of conflicts not representable by
conflict markers (modify/delete, mode conflict, binary file changed on
both sides, file/directory conflicts, various rename conflict
permutations, etc.)

Do NOT interpret an empty <Conflicted file info> list as a clean merge;
check the exit status.  A merge can have conflicts without having
individual files conflict (there are a few types of directory rename
conflicts that fall into this category, and others might also be added
in the future).

Do NOT attempt to guess or make the user guess the conflict types from
the <Conflicted file info> list.  The information there is insufficient
to do so.  For example: Rename/rename(1to2) conflicts (both sides
renamed the same file differently) will result in three different file
having higher order stages (but each only has one higher order stage),
with no way (short of the <Informational messages> section) to determine
which three files are related.  File/directory conflicts also result in
a file with exactly one higher order stage.
Possibly-involved-in-directory-rename conflicts (when
"merge.directoryRenames" is unset or set to "conflicts") also result in
a file with exactly one higher order stage.  In all cases, the
<Informational messages> section has the necessary info, though it is
not designed to be machine parseable.

Do NOT assume all filenames listed in the <Informational messages>
section had conflicts.  Messages can be included for files that have no
conflicts, such as "Auto-merging <file>".

AVOID taking the OIDS from the <Conflicted file info> and re-merging
them to present the conflicts to the user.  This will lose information.
Instead, look up the version of the file found within the <OID of
toplevel tree> and show that instead.  In particular, the latter will
have conflict markers annotated with the original branch/commit being
merged and, if renames were involved, the original filename.  While you
could include the original branch/commit in the conflict marker
annotations when re-merging, the original filename is not available from
the <Conflicted file info> and thus you would be losing information that
might help the user resolve the conflict.

GIT
---
Part of the linkgit:git[1] suite
