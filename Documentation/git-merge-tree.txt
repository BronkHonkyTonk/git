git-merge-tree(1)
=================

NAME
----
git-merge-tree - Perform merge without touching index or working tree


SYNOPSIS
--------
[verse]
'git merge-tree' [--write-tree] <branch1> <branch2>
'git merge-tree' [--trivial-merge] <base-tree> <branch1> <branch2>

DESCRIPTION
-----------

Performs a merge, but does not make any new commits and does not read
from or write to either the working tree or index.

The first form will merge the two branches, doing a full recursive
merge with rename detection.  The rest of this manual (other than the
next paragraph) describes the first form in more detail -- including
options, output format, exit status, and usage notes.

The second form is deprecated; it is kept for backward compatibility
reasons but may be deleted in the future.  It will only do a trivial
merge.  It reads three tree-ish, and outputs trivial merge results and
conflicting stages to the standard output in a semi-diff format.
Since this was designed for higher level scripts to consume and merge
the results back into the index, it omits entries that match
<branch1>.  The result of this second form is is similar to what
three-way 'git read-tree -m' does, but instead of storing the results
in the index, the command outputs the entries to the standard output.
This form not only has limited applicability, the output format is
also difficult to work with, and it will generally be less performant
than the first form even on successful merges (especially if working
in large repositories).  The remainder of this manual will only
discuss the first form.

OUTPUT
------

For either a successful or conflicted merge, the output from
git-merge-tree is simply one line:

	<OID of toplevel tree>

The printed tree object corresponds to what would be checked out in
the working tree at the end of `git merge`, and thus may have files
with conflict markers in them.

EXIT STATUS
-----------

For a successful, non-conflicted merge, the exit status is 0.  When the
merge has conflicts, the exit status is 1.  If the merge is not able to
complete (or start) due to some kind of error, the exit status is
something other than 0 or 1.

USAGE NOTES
-----------

git-merge-tree was written to be low-level plumbing, similar to
hash-object, mktree, commit-tree, update-ref, and mktag.  Thus, it could
be used as a part of a series of steps such as

       NEWTREE=$(git merge-tree --write-tree $BRANCH1 $BRANCH2)
       test $? -eq 0 || die "There were conflicts..."
       NEWCOMMIT=$(git commit-tree $NEWTREE -p $BRANCH1 -p $BRANCH2)
       git update-ref $BRANCH1 $NEWCOMMIT

However, it does not quite fit into the same category of low-level
plumbing commands since the possibility of merge conflicts give it a
much higher chance of the command not succeeding.

GIT
---
Part of the linkgit:git[1] suite
