diff_cmd () {
	"$merge_tool_path" "$LOCAL" "$REMOTE"
}

merge_cmd () {
	check_meld_for_features

	option_auto_merge=
	if test "$meld_has_auto_merge_option" = true
	then
		option_auto_merge="--auto-merge"
	fi

	if test "$meld_has_output_option" = true
	then
		"$merge_tool_path" $option_auto_merge --output="$MERGED" \
			"$LOCAL" "$BASE" "$REMOTE"
	else
		"$merge_tool_path" $option_auto_merge "$LOCAL" "$MERGED" "$REMOTE"
	fi
}

# Get meld help message
get_meld_help_msg () {
	meld_path="$(git config mergetool.meld.path || echo meld)"
	$meld_path --help 2>&1
}

# Check the features and set flags
check_meld_for_features () {
	# Check whether we should use 'meld --output <file>'
	if test -z "${meld_has_output_option:+set}"
	then
		meld_has_output_option=$(git config --bool mergetool.meld.hasOutput)
		if test "$meld_has_output_option" = true -o \
			"$meld_has_output_option" = false
		then
			: use configured value
		else
			# treat meld_has_output_option as "auto"
			if test -z "$meld_help_msg"
			then
				meld_help_msg="$(get_meld_help_msg)"
			fi

			case "$meld_help_msg" in
				*"--output="* | *"[OPTION"???"]"*)
					# old ones mention --output and new ones just say OPTION...
					meld_has_output_option=true ;;
				*)
					meld_has_output_option=false ;;
			esac
		fi
	fi
	# Check whether we should use 'meld --auto-merge ...'
	if test -z "${meld_has_auto_merge_option:+set}"
	then
		meld_has_auto_merge_option=$(git config mergetool.meld.hasAutoMerge)
		if test "$meld_has_auto_merge_option" = auto
		then
			# testing the "--auto-merge" option only if config is "auto"
			if test -z "$meld_help_msg"
			then
					meld_help_msg="$(get_meld_help_msg)"
			fi

			case "$meld_help_msg" in
				*"--auto-merge"*)
					: old ones mention --output and new ones just say OPTION...
					meld_has_auto_merge_option=true ;;
				*)
					meld_has_auto_merge_option=false ;;
			esac
		fi
	fi
}
